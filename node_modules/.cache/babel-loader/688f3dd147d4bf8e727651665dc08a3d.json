{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\nexport const requestRobots = dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => {\n    return response.json();\n  }).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/Users/lgymac/udemy1/Robo-Friends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SACCA,mBADD,EAECC,sBAFD,EAGCC,sBAHD,EAICC,qBAJD,QAKQ,gBALR;AASA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACzCC,EAAAA,IAAI,EAACN,mBADoC;AAEzCO,EAAAA,OAAO,EAAEF;AAFgC,CAAX,CAAvB;AAKP,OAAO,MAAMG,aAAa,GAAIC,QAAD,IAAc;AAC1CA,EAAAA,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEL;AAAP,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAE;AAAC,WAAOA,QAAQ,CAACC,IAAT,EAAP;AAAwB,GADzC,EAECF,IAFD,CAEMG,IAAI,IAAIL,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAACJ,sBAAN;AAA8BK,IAAAA,OAAO,EAAEO;AAAvC,GAAD,CAFtB,EAGCC,KAHD,CAGOC,KAAK,IAAIP,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAACH,qBAAN;AAA6BI,IAAAA,OAAO,EAAES;AAAtC,GAAD,CAHxB;AAIA,CANM","sourcesContent":["import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n\t} from './constants.js';\n\n\n\nexport const setSearchField = (text) => ({\ntype:CHANGE_SEARCH_FIELD,\npayload: text\n})\n\nexport const requestRobots = (dispatch) => {\n\tdispatch({type: REQUEST_ROBOTS_PENDING})\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t.then(response=>{return response.json();})\n\t.then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t.catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload: error}))\n}"]},"metadata":{},"sourceType":"module"}